// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: calculator.proto
#ifndef GRPC_calculator_2eproto__INCLUDED
#define GRPC_calculator_2eproto__INCLUDED

#include "calculator.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace calculator {

class Calculator final {
 public:
  static constexpr char const* service_full_name() {
    return "calculator.Calculator";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Add(::grpc::ClientContext* context, const ::calculator::AddRequest& request, ::calculator::AddResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::AddResponse>> AsyncAdd(::grpc::ClientContext* context, const ::calculator::AddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::AddResponse>>(AsyncAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::AddResponse>> PrepareAsyncAdd(::grpc::ClientContext* context, const ::calculator::AddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::AddResponse>>(PrepareAsyncAddRaw(context, request, cq));
    }
    virtual ::grpc::Status Sub(::grpc::ClientContext* context, const ::calculator::SubRequest& request, ::calculator::SubResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::SubResponse>> AsyncSub(::grpc::ClientContext* context, const ::calculator::SubRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::SubResponse>>(AsyncSubRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::SubResponse>> PrepareAsyncSub(::grpc::ClientContext* context, const ::calculator::SubRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::SubResponse>>(PrepareAsyncSubRaw(context, request, cq));
    }
    virtual ::grpc::Status Mul(::grpc::ClientContext* context, const ::calculator::MulRequest& request, ::calculator::MulResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::MulResponse>> AsyncMul(::grpc::ClientContext* context, const ::calculator::MulRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::MulResponse>>(AsyncMulRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::MulResponse>> PrepareAsyncMul(::grpc::ClientContext* context, const ::calculator::MulRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::MulResponse>>(PrepareAsyncMulRaw(context, request, cq));
    }
    virtual ::grpc::Status Div(::grpc::ClientContext* context, const ::calculator::DivRequest& request, ::calculator::DivResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::DivResponse>> AsyncDiv(::grpc::ClientContext* context, const ::calculator::DivRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::DivResponse>>(AsyncDivRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::DivResponse>> PrepareAsyncDiv(::grpc::ClientContext* context, const ::calculator::DivRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::DivResponse>>(PrepareAsyncDivRaw(context, request, cq));
    }
    virtual ::grpc::Status Mod(::grpc::ClientContext* context, const ::calculator::ModRequest& request, ::calculator::ModResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::ModResponse>> AsyncMod(::grpc::ClientContext* context, const ::calculator::ModRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::ModResponse>>(AsyncModRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::ModResponse>> PrepareAsyncMod(::grpc::ClientContext* context, const ::calculator::ModRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::ModResponse>>(PrepareAsyncModRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Add(::grpc::ClientContext* context, const ::calculator::AddRequest* request, ::calculator::AddResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Add(::grpc::ClientContext* context, const ::calculator::AddRequest* request, ::calculator::AddResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Sub(::grpc::ClientContext* context, const ::calculator::SubRequest* request, ::calculator::SubResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Sub(::grpc::ClientContext* context, const ::calculator::SubRequest* request, ::calculator::SubResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Mul(::grpc::ClientContext* context, const ::calculator::MulRequest* request, ::calculator::MulResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Mul(::grpc::ClientContext* context, const ::calculator::MulRequest* request, ::calculator::MulResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Div(::grpc::ClientContext* context, const ::calculator::DivRequest* request, ::calculator::DivResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Div(::grpc::ClientContext* context, const ::calculator::DivRequest* request, ::calculator::DivResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Mod(::grpc::ClientContext* context, const ::calculator::ModRequest* request, ::calculator::ModResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Mod(::grpc::ClientContext* context, const ::calculator::ModRequest* request, ::calculator::ModResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::AddResponse>* AsyncAddRaw(::grpc::ClientContext* context, const ::calculator::AddRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::AddResponse>* PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::calculator::AddRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::SubResponse>* AsyncSubRaw(::grpc::ClientContext* context, const ::calculator::SubRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::SubResponse>* PrepareAsyncSubRaw(::grpc::ClientContext* context, const ::calculator::SubRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::MulResponse>* AsyncMulRaw(::grpc::ClientContext* context, const ::calculator::MulRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::MulResponse>* PrepareAsyncMulRaw(::grpc::ClientContext* context, const ::calculator::MulRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::DivResponse>* AsyncDivRaw(::grpc::ClientContext* context, const ::calculator::DivRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::DivResponse>* PrepareAsyncDivRaw(::grpc::ClientContext* context, const ::calculator::DivRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::ModResponse>* AsyncModRaw(::grpc::ClientContext* context, const ::calculator::ModRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::ModResponse>* PrepareAsyncModRaw(::grpc::ClientContext* context, const ::calculator::ModRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Add(::grpc::ClientContext* context, const ::calculator::AddRequest& request, ::calculator::AddResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::AddResponse>> AsyncAdd(::grpc::ClientContext* context, const ::calculator::AddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::AddResponse>>(AsyncAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::AddResponse>> PrepareAsyncAdd(::grpc::ClientContext* context, const ::calculator::AddRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::AddResponse>>(PrepareAsyncAddRaw(context, request, cq));
    }
    ::grpc::Status Sub(::grpc::ClientContext* context, const ::calculator::SubRequest& request, ::calculator::SubResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::SubResponse>> AsyncSub(::grpc::ClientContext* context, const ::calculator::SubRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::SubResponse>>(AsyncSubRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::SubResponse>> PrepareAsyncSub(::grpc::ClientContext* context, const ::calculator::SubRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::SubResponse>>(PrepareAsyncSubRaw(context, request, cq));
    }
    ::grpc::Status Mul(::grpc::ClientContext* context, const ::calculator::MulRequest& request, ::calculator::MulResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::MulResponse>> AsyncMul(::grpc::ClientContext* context, const ::calculator::MulRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::MulResponse>>(AsyncMulRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::MulResponse>> PrepareAsyncMul(::grpc::ClientContext* context, const ::calculator::MulRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::MulResponse>>(PrepareAsyncMulRaw(context, request, cq));
    }
    ::grpc::Status Div(::grpc::ClientContext* context, const ::calculator::DivRequest& request, ::calculator::DivResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::DivResponse>> AsyncDiv(::grpc::ClientContext* context, const ::calculator::DivRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::DivResponse>>(AsyncDivRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::DivResponse>> PrepareAsyncDiv(::grpc::ClientContext* context, const ::calculator::DivRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::DivResponse>>(PrepareAsyncDivRaw(context, request, cq));
    }
    ::grpc::Status Mod(::grpc::ClientContext* context, const ::calculator::ModRequest& request, ::calculator::ModResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::ModResponse>> AsyncMod(::grpc::ClientContext* context, const ::calculator::ModRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::ModResponse>>(AsyncModRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::ModResponse>> PrepareAsyncMod(::grpc::ClientContext* context, const ::calculator::ModRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::ModResponse>>(PrepareAsyncModRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Add(::grpc::ClientContext* context, const ::calculator::AddRequest* request, ::calculator::AddResponse* response, std::function<void(::grpc::Status)>) override;
      void Add(::grpc::ClientContext* context, const ::calculator::AddRequest* request, ::calculator::AddResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Sub(::grpc::ClientContext* context, const ::calculator::SubRequest* request, ::calculator::SubResponse* response, std::function<void(::grpc::Status)>) override;
      void Sub(::grpc::ClientContext* context, const ::calculator::SubRequest* request, ::calculator::SubResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Mul(::grpc::ClientContext* context, const ::calculator::MulRequest* request, ::calculator::MulResponse* response, std::function<void(::grpc::Status)>) override;
      void Mul(::grpc::ClientContext* context, const ::calculator::MulRequest* request, ::calculator::MulResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Div(::grpc::ClientContext* context, const ::calculator::DivRequest* request, ::calculator::DivResponse* response, std::function<void(::grpc::Status)>) override;
      void Div(::grpc::ClientContext* context, const ::calculator::DivRequest* request, ::calculator::DivResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Mod(::grpc::ClientContext* context, const ::calculator::ModRequest* request, ::calculator::ModResponse* response, std::function<void(::grpc::Status)>) override;
      void Mod(::grpc::ClientContext* context, const ::calculator::ModRequest* request, ::calculator::ModResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::calculator::AddResponse>* AsyncAddRaw(::grpc::ClientContext* context, const ::calculator::AddRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::AddResponse>* PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::calculator::AddRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::SubResponse>* AsyncSubRaw(::grpc::ClientContext* context, const ::calculator::SubRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::SubResponse>* PrepareAsyncSubRaw(::grpc::ClientContext* context, const ::calculator::SubRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::MulResponse>* AsyncMulRaw(::grpc::ClientContext* context, const ::calculator::MulRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::MulResponse>* PrepareAsyncMulRaw(::grpc::ClientContext* context, const ::calculator::MulRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::DivResponse>* AsyncDivRaw(::grpc::ClientContext* context, const ::calculator::DivRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::DivResponse>* PrepareAsyncDivRaw(::grpc::ClientContext* context, const ::calculator::DivRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::ModResponse>* AsyncModRaw(::grpc::ClientContext* context, const ::calculator::ModRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::ModResponse>* PrepareAsyncModRaw(::grpc::ClientContext* context, const ::calculator::ModRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Add_;
    const ::grpc::internal::RpcMethod rpcmethod_Sub_;
    const ::grpc::internal::RpcMethod rpcmethod_Mul_;
    const ::grpc::internal::RpcMethod rpcmethod_Div_;
    const ::grpc::internal::RpcMethod rpcmethod_Mod_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Add(::grpc::ServerContext* context, const ::calculator::AddRequest* request, ::calculator::AddResponse* response);
    virtual ::grpc::Status Sub(::grpc::ServerContext* context, const ::calculator::SubRequest* request, ::calculator::SubResponse* response);
    virtual ::grpc::Status Mul(::grpc::ServerContext* context, const ::calculator::MulRequest* request, ::calculator::MulResponse* response);
    virtual ::grpc::Status Div(::grpc::ServerContext* context, const ::calculator::DivRequest* request, ::calculator::DivResponse* response);
    virtual ::grpc::Status Mod(::grpc::ServerContext* context, const ::calculator::ModRequest* request, ::calculator::ModResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Add() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::calculator::AddRequest* /*request*/, ::calculator::AddResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdd(::grpc::ServerContext* context, ::calculator::AddRequest* request, ::grpc::ServerAsyncResponseWriter< ::calculator::AddResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Sub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Sub() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Sub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sub(::grpc::ServerContext* /*context*/, const ::calculator::SubRequest* /*request*/, ::calculator::SubResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSub(::grpc::ServerContext* context, ::calculator::SubRequest* request, ::grpc::ServerAsyncResponseWriter< ::calculator::SubResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Mul : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Mul() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Mul() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mul(::grpc::ServerContext* /*context*/, const ::calculator::MulRequest* /*request*/, ::calculator::MulResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMul(::grpc::ServerContext* context, ::calculator::MulRequest* request, ::grpc::ServerAsyncResponseWriter< ::calculator::MulResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Div : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Div() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Div() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Div(::grpc::ServerContext* /*context*/, const ::calculator::DivRequest* /*request*/, ::calculator::DivResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDiv(::grpc::ServerContext* context, ::calculator::DivRequest* request, ::grpc::ServerAsyncResponseWriter< ::calculator::DivResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Mod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Mod() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Mod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mod(::grpc::ServerContext* /*context*/, const ::calculator::ModRequest* /*request*/, ::calculator::ModResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMod(::grpc::ServerContext* context, ::calculator::ModRequest* request, ::grpc::ServerAsyncResponseWriter< ::calculator::ModResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Add<WithAsyncMethod_Sub<WithAsyncMethod_Mul<WithAsyncMethod_Div<WithAsyncMethod_Mod<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Add() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::calculator::AddRequest, ::calculator::AddResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::calculator::AddRequest* request, ::calculator::AddResponse* response) { return this->Add(context, request, response); }));}
    void SetMessageAllocatorFor_Add(
        ::grpc::MessageAllocator< ::calculator::AddRequest, ::calculator::AddResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::calculator::AddRequest, ::calculator::AddResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::calculator::AddRequest* /*request*/, ::calculator::AddResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Add(
      ::grpc::CallbackServerContext* /*context*/, const ::calculator::AddRequest* /*request*/, ::calculator::AddResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Sub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Sub() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::calculator::SubRequest, ::calculator::SubResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::calculator::SubRequest* request, ::calculator::SubResponse* response) { return this->Sub(context, request, response); }));}
    void SetMessageAllocatorFor_Sub(
        ::grpc::MessageAllocator< ::calculator::SubRequest, ::calculator::SubResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::calculator::SubRequest, ::calculator::SubResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Sub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sub(::grpc::ServerContext* /*context*/, const ::calculator::SubRequest* /*request*/, ::calculator::SubResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Sub(
      ::grpc::CallbackServerContext* /*context*/, const ::calculator::SubRequest* /*request*/, ::calculator::SubResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Mul : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Mul() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::calculator::MulRequest, ::calculator::MulResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::calculator::MulRequest* request, ::calculator::MulResponse* response) { return this->Mul(context, request, response); }));}
    void SetMessageAllocatorFor_Mul(
        ::grpc::MessageAllocator< ::calculator::MulRequest, ::calculator::MulResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::calculator::MulRequest, ::calculator::MulResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Mul() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mul(::grpc::ServerContext* /*context*/, const ::calculator::MulRequest* /*request*/, ::calculator::MulResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Mul(
      ::grpc::CallbackServerContext* /*context*/, const ::calculator::MulRequest* /*request*/, ::calculator::MulResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Div : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Div() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::calculator::DivRequest, ::calculator::DivResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::calculator::DivRequest* request, ::calculator::DivResponse* response) { return this->Div(context, request, response); }));}
    void SetMessageAllocatorFor_Div(
        ::grpc::MessageAllocator< ::calculator::DivRequest, ::calculator::DivResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::calculator::DivRequest, ::calculator::DivResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Div() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Div(::grpc::ServerContext* /*context*/, const ::calculator::DivRequest* /*request*/, ::calculator::DivResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Div(
      ::grpc::CallbackServerContext* /*context*/, const ::calculator::DivRequest* /*request*/, ::calculator::DivResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Mod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Mod() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::calculator::ModRequest, ::calculator::ModResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::calculator::ModRequest* request, ::calculator::ModResponse* response) { return this->Mod(context, request, response); }));}
    void SetMessageAllocatorFor_Mod(
        ::grpc::MessageAllocator< ::calculator::ModRequest, ::calculator::ModResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::calculator::ModRequest, ::calculator::ModResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Mod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mod(::grpc::ServerContext* /*context*/, const ::calculator::ModRequest* /*request*/, ::calculator::ModResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Mod(
      ::grpc::CallbackServerContext* /*context*/, const ::calculator::ModRequest* /*request*/, ::calculator::ModResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Add<WithCallbackMethod_Sub<WithCallbackMethod_Mul<WithCallbackMethod_Div<WithCallbackMethod_Mod<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Add() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::calculator::AddRequest* /*request*/, ::calculator::AddResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Sub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Sub() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Sub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sub(::grpc::ServerContext* /*context*/, const ::calculator::SubRequest* /*request*/, ::calculator::SubResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Mul : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Mul() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Mul() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mul(::grpc::ServerContext* /*context*/, const ::calculator::MulRequest* /*request*/, ::calculator::MulResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Div : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Div() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Div() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Div(::grpc::ServerContext* /*context*/, const ::calculator::DivRequest* /*request*/, ::calculator::DivResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Mod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Mod() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Mod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mod(::grpc::ServerContext* /*context*/, const ::calculator::ModRequest* /*request*/, ::calculator::ModResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Add() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::calculator::AddRequest* /*request*/, ::calculator::AddResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdd(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Sub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Sub() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Sub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sub(::grpc::ServerContext* /*context*/, const ::calculator::SubRequest* /*request*/, ::calculator::SubResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSub(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Mul : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Mul() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Mul() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mul(::grpc::ServerContext* /*context*/, const ::calculator::MulRequest* /*request*/, ::calculator::MulResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMul(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Div : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Div() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Div() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Div(::grpc::ServerContext* /*context*/, const ::calculator::DivRequest* /*request*/, ::calculator::DivResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDiv(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Mod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Mod() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Mod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mod(::grpc::ServerContext* /*context*/, const ::calculator::ModRequest* /*request*/, ::calculator::ModResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMod(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Add() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Add(context, request, response); }));
    }
    ~WithRawCallbackMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::calculator::AddRequest* /*request*/, ::calculator::AddResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Add(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Sub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Sub() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Sub(context, request, response); }));
    }
    ~WithRawCallbackMethod_Sub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sub(::grpc::ServerContext* /*context*/, const ::calculator::SubRequest* /*request*/, ::calculator::SubResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Sub(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Mul : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Mul() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Mul(context, request, response); }));
    }
    ~WithRawCallbackMethod_Mul() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mul(::grpc::ServerContext* /*context*/, const ::calculator::MulRequest* /*request*/, ::calculator::MulResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Mul(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Div : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Div() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Div(context, request, response); }));
    }
    ~WithRawCallbackMethod_Div() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Div(::grpc::ServerContext* /*context*/, const ::calculator::DivRequest* /*request*/, ::calculator::DivResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Div(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Mod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Mod() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Mod(context, request, response); }));
    }
    ~WithRawCallbackMethod_Mod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mod(::grpc::ServerContext* /*context*/, const ::calculator::ModRequest* /*request*/, ::calculator::ModResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Mod(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Add() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::calculator::AddRequest, ::calculator::AddResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::calculator::AddRequest, ::calculator::AddResponse>* streamer) {
                       return this->StreamedAdd(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::calculator::AddRequest* /*request*/, ::calculator::AddResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAdd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::calculator::AddRequest,::calculator::AddResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Sub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Sub() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::calculator::SubRequest, ::calculator::SubResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::calculator::SubRequest, ::calculator::SubResponse>* streamer) {
                       return this->StreamedSub(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Sub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Sub(::grpc::ServerContext* /*context*/, const ::calculator::SubRequest* /*request*/, ::calculator::SubResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSub(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::calculator::SubRequest,::calculator::SubResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Mul : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Mul() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::calculator::MulRequest, ::calculator::MulResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::calculator::MulRequest, ::calculator::MulResponse>* streamer) {
                       return this->StreamedMul(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Mul() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Mul(::grpc::ServerContext* /*context*/, const ::calculator::MulRequest* /*request*/, ::calculator::MulResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMul(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::calculator::MulRequest,::calculator::MulResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Div : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Div() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::calculator::DivRequest, ::calculator::DivResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::calculator::DivRequest, ::calculator::DivResponse>* streamer) {
                       return this->StreamedDiv(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Div() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Div(::grpc::ServerContext* /*context*/, const ::calculator::DivRequest* /*request*/, ::calculator::DivResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDiv(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::calculator::DivRequest,::calculator::DivResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Mod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Mod() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::calculator::ModRequest, ::calculator::ModResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::calculator::ModRequest, ::calculator::ModResponse>* streamer) {
                       return this->StreamedMod(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Mod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Mod(::grpc::ServerContext* /*context*/, const ::calculator::ModRequest* /*request*/, ::calculator::ModResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMod(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::calculator::ModRequest,::calculator::ModResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Add<WithStreamedUnaryMethod_Sub<WithStreamedUnaryMethod_Mul<WithStreamedUnaryMethod_Div<WithStreamedUnaryMethod_Mod<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Add<WithStreamedUnaryMethod_Sub<WithStreamedUnaryMethod_Mul<WithStreamedUnaryMethod_Div<WithStreamedUnaryMethod_Mod<Service > > > > > StreamedService;
};

}  // namespace calculator


#endif  // GRPC_calculator_2eproto__INCLUDED
